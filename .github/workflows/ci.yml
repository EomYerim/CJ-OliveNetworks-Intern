
name: Spring Boot CI/CD to ECR and EKS (with GitOps)

on:
  push:
    branches: [ "develop" ]

env:
  ECR_REGISTRY: 051826731133.dkr.ecr.ap-northeast-2.amazonaws.com
  ECR_REPOSITORY: cjone-dev
  AWS_REGION: ap-northeast-2
  # The EKS cluster name is no longer strictly needed for the kubectl apply step,
  # but can be kept for other potential uses.
  EKS_CLUSTER_NAME: cjone-dev-cluster
  K8S_MANIFEST_REPO: EomYerim/CJONE-k8s-manifests
  K8S_MANIFEST_PATH: k8s-manifests/k8s/deployment.yaml

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read # Read permission for the initial checkout

    steps:
      # Step 1: Checkout the application code repository
      - name: Checkout application repository
        uses: actions/checkout@v4

      # Step 2: Configure AWS credentials to interact with ECR
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Step 3: Log in to Amazon ECR
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # Step 4: Set up JDK 17 for building the Spring Boot application
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      # Step 5: Grant execution permissions to the Gradle wrapper
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # Step 6: Build the application using Gradle
      - name: Build with Gradle
        run: ./gradlew build -x test

      # Step 7: Generate a unique image tag and build/push the image
      - name: Build and push Docker image with unique tag
        id: build-image
        run: |
          # Use the short Git SHA as the unique image tag
          IMAGE_TAG=$(git rev-parse --short HEAD)
          echo "Image tag: $IMAGE_TAG"
          
          # Build the image with both the unique tag and the 'latest' tag
          docker build -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest .
          
          # Push both tags to ECR
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
          
          # Expose the unique tag as an output for subsequent steps
          echo "tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      # Step 8: Checkout the Kubernetes manifests repository to update it
      - name: Checkout K8s manifests repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.K8S_MANIFEST_REPO }}
          path: k8s-manifests
          # You need a Personal Access Token (PAT) with 'repo' scope to push changes
          # Store this token as a secret named 'PAT' in your GitHub repository settings
          token: ${{ secrets.PAT }}

      # Step 9: Update the image tag in the Kubernetes deployment manifest
      - name: Update Kubernetes manifest image tag
        run: |
          # Use sed to find the line with 'image:' and replace it with the new, uniquely tagged image
          sed -i 's|image:.*|image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ steps.build-image.outputs.tag }}|g' ${{ env.K8S_MANIFEST_PATH }}
          echo "Manifest file ${{ env.K8S_MANIFEST_PATH }} updated."
          cat ${{ env.K8S_MANIFEST_PATH }}

      # Step 10: Commit and push the updated manifest file back to its repository
      - name: Commit and push updated manifest
        run: |
          cd k8s-manifests
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add .
          # Commit only if there are changes
          if ! git diff --staged --quiet; then
            git commit -m "Update image tag for cjone-dev to ${{ steps.build-image.outputs.tag }}"
            git push
            echo "Pushed manifest changes to ${{ env.K8S_MANIFEST_REPO }}"
          else
            echo "No changes to commit."
          fi