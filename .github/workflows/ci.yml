name: Spring Boot CI/CD to ECR and EKS

on:
  push:
    branches: [ "develop" ]

env:
  ECR_REGISTRY: 051826731133.dkr.ecr.ap-northeast-2.amazonaws.com
  ECR_REPOSITORY: cjone-dev
  AWS_REGION: ap-northeast-2
  EKS_CLUSTER_NAME: cjone-dev-cluster

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          # 💡 [속도 개선] Gradle 종속성을 캐싱하여 빌드 속도를 향상시킵니다.
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test

      # 💡 이미지 태그를 생성하고, 다음 스텝에서 사용할 수 있도록 GITHUB_OUTPUT에 저장합니다.
      - name: Define Image Tag
        id: image_tag_generator
        run: echo "tag=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        run: |
          docker build -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ steps.image_tag_generator.outputs.tag }} .
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ steps.image_tag_generator.outputs.tag }}

      - name: Set Kubeconfig
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}


      - name: Deploy to Kubernetes
        env:
          IMAGE_TAG: ${{ steps.image_tag_generator.outputs.tag }}
        run: |
          envsubst < k8s/deployment.yaml | kubectl apply -f -
